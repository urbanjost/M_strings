." Text automatically generated by txt2man
.TH "stretch" "3m_strings" "September 10, 2021" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBstretch\fP(3f) - [M_strings:LENGTH] return string padded to at least
specified length
(LICENSE:PD)

.SH SYNOPSIS
function \fBstretch\fP(str,length,pattern,suffix) \fBresult\fP(\fIstrout\fP)
.PP
.nf
.fam C
    character(len=*),intent(in)         :: str
    integer,intent(in)                  :: length
    character(len=*)intent(in),optional :: pattern
    character(len=*)intent(in),optional :: suffix
    character(len=:),allocatable        :: strout

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
\fBstretch\fP(3f) pads a string with spaces to at least the specified
length. If the trimmed input string is longer than the requested
length the original string is returned trimmed of trailing spaces.
.SH OPTIONS
.TP
.B str
the input string to return trimmed, but then padded to
the specified length if shorter than length
.TP
.B length
The minimum string length to return
.TP
.B pattern
optional string to use as padding. Defaults to a space.
.TP
.B suffix
optional string to append to output string
.SH RETURNS
.TP
.B \fIstrout\fP
The input string padded to the requested length or
the trimmed input string if the input string is
longer than the requested length.
.SH EXAMPLE
Sample Program:
.PP
.nf
.fam C
  program demo_stretch
   use M_strings, only : stretch
   implicit none
   character(len=10)            :: string='abcdefghij'
   character(len=:),allocatable :: answer
   integer                      :: i
      answer=stretch(string,5)
      write(*,'("[",a,"]")') answer
      answer=stretch(string,20)
      write(*,'("[",a,"]")') answer
      i=30
      write(*,*)
      write(*,'(1x,a,i0)') &
       & stretch('CHAPTER 1 : The beginning ',i,'.'), 1    ,&
       & stretch('CHAPTER 2 : The end ',i,'.'),       1234 ,&
       & stretch('APPENDIX ',i,'.'),                  1235
      write(*,*)
      write(*,'(1x,a,i7)') &
       & stretch('CHAPTER 1 : The beginning ',i,'.'), 1    ,&
       & stretch('CHAPTER 2 : The end ',i,'.'),       1234 ,&
       & stretch('APPENDIX ',i,'.'),                  1235
      write(*,*)
      write(*,*) &
       & stretch('CHAPTER 1 : The beginning ',i,suffix=': '), 1
      write(*,*) &
       & stretch('CHAPTER 2 : The end ',i,suffix=': '),1234
      write(*,*) &
       & stretch('APPENDIX ',i,suffix=': '),           1235
  end program demo_stretch

  Results:

.nf
.fam C
   [abcdefghij]
   [abcdefghij          ]

.nf
.fam C
    CHAPTER 1 : The beginning \.\.\..1
    CHAPTER 2 : The end \.\.\........1234
    APPENDIX \.\.\...................1235

    CHAPTER 1 : The beginning \.\.\..      1
    CHAPTER 2 : The end \.\.\........   1234
    APPENDIX \.\.\...................   1235

    CHAPTER 1 : The beginning     :            1
    CHAPTER 2 : The end           :         1234
    APPENDIX                      :         1235

.fam T
.fi
.SH AUTHOR
John S. Urban
.SH LICENSE
Public Domain
