." Text automatically generated by txt2man
.TH "chomp" "3m_strings" "September 10, 2021" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBchomp\fP(3f) - [M_strings:TOKENS] Tokenize a string, consuming it one
token per call
(LICENSE:PD)

.SH SYNOPSIS
function \fBchomp\fP(source_string,token[,delimiters])
.PP
.nf
.fam C
    character(len=*)                     :: source_string
    character(len=:),intent(out)         :: token
    character(len=:),intent(in),optional :: delimiters
    integer                              :: chomp

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
The \fBCHOMP\fP(3f) function is used to isolate sequential tokens in a
string, SOURCE_STRING. These tokens are delimited in the string by at
least one of the characters in DELIMITERS. This routine consumes the
source_string one token per call. It returns \fB-1\fP when complete. The
default delimiter list is "space,tab,carriage return,newline".
.SH OPTIONS
.TP
.B SOURCE_STRING
string to tokenize
.TP
.B DELIMITERS
list of separator characters
.SH RETURNS
.TP
.B TOKEN
returned token
.TP
.B CHOMP
status flag. 0 = success, \fB-1\fP = no tokens remain
.SH EXAMPLES
Sample program:
.PP
.nf
.fam C
   program demo_chomp

   use M_strings, only : chomp
   implicit none
   character(len=100)            :: inline
   character(len=:),allocatable  :: token
   character(len=*),parameter    :: delimiters=' ;,'
   integer                       :: ios
   integer                       :: icount
   integer                       :: itoken
      icount=0
      do        ! read lines from stdin until end-of-file or error
         read (unit=*,fmt="(a)",iostat=ios) inline
         if(ios.ne.0)stop
         icount=icount+1
         itoken=0
         write(*,*)'INLINE ',trim(inline)
         do while ( chomp(inline,token,delimiters).ge. 0)
            itoken=itoken+1
            print *, itoken,'TOKEN=['//trim(token)//']'
         enddo
      enddo

   end program demo_chomp

.fam T
.fi
.RS
sample input file
.PP
.nf
.fam C
    this is a test of chomp; A:B :;,C;;

.fam T
.fi
sample output file
.PP
.nf
.fam C
    > INLINE     this is a test of chomp; A:B :;,C;;
    >           1 TOKEN=[this]
    >           2 TOKEN=[is]
    >           3 TOKEN=[a]
    >           4 TOKEN=[test]
    >           5 TOKEN=[of]
    >           6 TOKEN=[chomp]
    >           7 TOKEN=[A:B]
    >           8 TOKEN=[:]
    >           9 TOKEN=[C]

.fam T
.fi
.SH AUTHOR
John S. Urban
.SH LICENSE
Public Domain
