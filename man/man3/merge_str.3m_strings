." Text automatically generated by txt2man
.TH "merge_str" "3m_strings" "September 10, 2021" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBmerge_str\fP(3f) - [M_strings:LENGTH] pads strings to same length and
then calls \fBMERGE\fP(3f)
(LICENSE:PD)

.SH SYNOPSIS
function \fBmerge_str\fP(str1,str2,expr) \fBresult\fP(\fIstrout\fP)
.PP
.nf
.fam C
    character(len=*),intent(in),optional :: str1
    character(len=*),intent(in),optional :: str2
    logical,intent(in)              :: expr
    character(len=:),allocatable    :: strout

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
\fBmerge_str\fP(3f) pads the shorter of str1 and str2 to the longest length
of str1 and str2 and then calls \fBMERGE\fP(padded_str1,padded_str2,expr).
It trims trailing spaces off the result and returns the trimmed
string. This makes it easier to call \fBMERGE\fP(3f) with strings, as
\fBMERGE\fP(3f) requires the strings to be the same length.
.PP
NOTE: STR1 and STR2 are always required even though declared optional.
this is so the call "STR_MERGE(A,B,present(A))" is a valid call.
The parameters STR1 and STR2 when they are optional parameters
can be passed to a procedure if the options are optional on the
called procedure.
.SH OPTIONS
.TP
.B STR1
string to return if the logical expression EXPR is true
.TP
.B STR2
string to return if the logical expression EXPR is false
.TP
.B EXPR
logical expression to evaluate to determine whether to return
STR1 when true, and STR2 when false.
.SH RESULT
.TP
.B MERGE_STR
a trimmed string is returned that is otherwise the value
of STR1 or STR2, depending on the logical expression EXPR.
.SH EXAMPLES
Sample Program:
.PP
.nf
.fam C
    program demo_merge_str
    use M_strings, only : merge_str
    implicit none
    character(len=:), allocatable :: answer
       answer=merge_str('first string', &
        & 'second string is longer',10.eq.10)
       write(*,'("[",a,"]")') answer
       answer=merge_str('first string', &
        & 'second string is longer',10.ne.10)
       write(*,'("[",a,"]")') answer
    end program demo_merge_str

.fam T
.fi
Expected output
.PP
.nf
.fam C
    [first string]
    [second string is longer]

.fam T
.fi
.SH AUTHOR
John S. Urban
.SH LICENSE
Public Domain
