." Text automatically generated by txt2man
.TH "M_strings" "3m_strings" "September 10, 2021" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBM_strings\fP(3f) - [M_strings:INTRO] Fortran string module

.SH DESCRIPTION
The \fBM_strings\fP(3fm) module is a collection of Fortran procedures
that supplement the built-in intrinsic string routines. Routines
for parsing, tokenizing, changing case, substituting new strings for
substrings, locating strings with simple wildcard expressions, removing
tabs and line terminators and other string manipulations are included.
.PP
\fBM_strings_oop\fP(3fm) is a companion module that provides an OOP interface
to the M_strings module.
.SH SYNOPSIS
\fBpublic\fP entities:
.PP
.nf
.fam C
     use M_strings, only : split,sep,delim,chomp,strtok
     use M_strings, only : substitute,change,modif,transliterate,reverse
     use M_strings, only : replace,join
     use M_strings, only : upper,lower,upper_quoted
     use M_strings, only : rotate13
     use M_strings, only : adjustc,compact,nospace,indent
     use M_strings, only : crop,unquote,quote
     use M_strings, only : len_white,atleast,stretch,lenset,merge_str
     use M_strings, only : switch,s2c,c2s
     use M_strings, only : noesc,notabs,dilate,expand,visible
     !x!use M_strings, only : uc
     use M_strings, only : string_to_value,string_to_values,s2v,s2vs
     use M_strings, only : value_to_string,v2s,msg
     use M_strings, only : listout,getvals
     use M_strings, only : glob, ends_with
     use M_strings, only : fmt
     use M_strings, only : base, decodebase, codebase, base2
     use M_strings, only : isalnum, isalpha, iscntrl, isdigit
     use M_strings, only : isgraph, islower, isprint, ispunct
     use M_strings, only : isspace, isupper, isascii, isblank, isxdigit
     use M_strings, only : isnumber
     use M_strings, only : fortran_name
     use M_strings, only : describe

.fam T
.fi
.fam T
.fi
.SS  TOKENS
.TP
.B split
subroutine parses string using specified delimiter characters
and stores tokens into an array
.TP
.B sep
function interface to \fBsplit\fP(3f)
.TP
.B delim
subroutine parses string using specified delimiter characters
and store tokens into an array
.TP
.B chomp
function consumes input line as it returns next token in a
string using specified delimiters
.TP
.B fmt
convert a string into a paragraph
strtok tokenize a string like C \fBstrtok\fP(3c) routine
.SS  EDITING
.TP
.B substitute
subroutine non-recursively globally replaces old
substring with new substring
.TP
.B replace
function non-recursively globally replaces old
substring with new substring using allocatable string
(version of \fBsubstitute\fP(3f) without limitation on
length of output string)
.TP
.B change
subroutine non-recursively globally replaces old
substring with new substring with a directive like
line editor
.TP
.B modif
subroutine modifies a string with a directive like the
XEDIT line editor MODIFY command
.TP
.B transliterate
replace characters found in set one with characters
from set two
.TP
.B reverse
reverse character order in a string
.TP
.B join
join an array of CHARACTER variables with specified
separator
.TP
.B rotate13
apply trivial encryption algorithm ROT13 to a string
.SS  CASE
.TP
.B upper
function converts string to uppercase
.TP
.B lower
function converts string to miniscule
.TP
.B upper_quoted
function converts string to uppercase skipping strings
quoted per Fortran rules
.SS  WHITE SPACE
.TP
.B adjustc
elemental function centers text within the length of the
input string
.TP
.B compact
left justify string and replace duplicate whitespace with
single characters or nothing
.TP
.B nospace
function replaces whitespace with nothing
.TP
.B indent
find number of leading spaces
.TP
.B crop
function trims leading and trailing spaces
.SS  QUOTES
.TP
.B unquote
remove quotes from string as if read with list-directed input
.TP
.B quote
add quotes to string as if written with list-directed input
.SS  STRING LENGTH
.TP
.B len_white
find location of last non-whitespace character
.TP
.B lenset
return a string of specified length
.TP
.B atleast
return a string of at least specified length
.TP
.B stretch
return a string of at least specified length with suffix
.TP
.B merge_str
make strings of equal length and then call \fBMERGE\fP(3f)
intrinsic
.SS  CHARACTER ARRAY VERSUS STRING
.TP
.B switch
switch between a string and an array of single characters
.TP
.B s2c
convert string to array of single characters and add null
terminator for passing to C
.TP
.B c2s
convert null-terminated array of single characters to
string for converting strings returned from C
.SS  NONALPHA
.TP
.B noesc
convert non-printable ASCII8 characters to a space
.TP
.B notabs
convert tabs to spaces while maintaining columns,
assuming tabs are set every 8 characters
.TP
.B dilate
function to convert tabs to spaces assuming tabs are set
every 8 characters
.TP
.B expand
expand escape sequences in a string
.TP
.B visible
expand escape sequences in a string to "control" and
meta-control representations
.SS  NUMERIC STRINGS
.TP
.B string_to_value
generic subroutine returns numeric value (REAL,
DOUBLEPRECISION, INTEGER) from string
.TP
.B string_to_values
subroutine reads an array of numbers from a string
.TP
.B getvals
subroutine reads a relatively arbitrary number
of values from a string using list-directed read
.TP
.B s2v
function returns DOUBLEPRECISION numeric value
from string
.TP
.B s2vs
function returns a DOUBLEPRECISION array of numbers
from a string
.TP
.B msg
append the values of up to nine values into a string
.TP
.B value_to_string
generic subroutine returns string given numeric value
(REAL, DOUBLEPRECISION, INTEGER, LOGICAL )
.TP
.B v2s
generic function returns string from numeric value
(REAL, DOUBLEPRECISION, INTEGER )
.TP
.B listout
expand a list of numbers where negative numbers
denote range ends (1 \fB-10\fP means 1 thru 10)
.TP
.B isnumber
determine if string represents a number
.SS  CHARACTER TESTS
.TP
.B glob
compares given string for match to pattern which may
contain wildcard characters
.TP
.B ends_with
test whether strings ends with one of the specified suffixs
.IP \(bu 3
isalnum returns .true. if character is a letter or digit
.IP \(bu 3
isalpha returns .true. if character is a letter and
.false. otherwise
.IP \(bu 3
iscntrl returns .true. if character is a delete character or
ordinary control character
.IP \(bu 3
isdigit returns .true. if character is a digit (0,1,\.\.\.,9)
and .false. otherwise
.IP \(bu 3
isgraph returns .true. if character is a printable character
except a space is considered non-printable
.IP \(bu 3
islower returns .true. if character is a miniscule letter (a-z)
.IP \(bu 3
isprint returns .true. if character is an ASCII printable
character
.IP \(bu 3
ispunct returns .true. if character is a printable punctuation
character
.IP \(bu 3
isspace returns .true. if character is a null, space, tab,
carriage return, new line, vertical tab, or formfeed
.IP \(bu 3
isupper returns .true. if character is an uppercase letter (A-Z)
.IP \(bu 3
isascii returns .true. if the character is in the range \fBchar\fP(0)
to \fBchar\fP(127)
.IP \(bu 3
isblank returns .true. if character is a blank character
(space or horizontal tab.
.IP \(bu 3
isxdigit returns .true. if character is a hexadecimal digit
(0-9, a-f, or A-F).
.TP
.B fortran_name
returns .true. if input string is a valid Fortran name
.SS  BASE CONVERSION
.TP
.B base
convert whole number string in base [2-36] to string
in alternate base [2-36]
.TP
.B base2
convert INTEGER to a string representing a binary value
.TP
.B codebase
convert whole number string in base [2-36] to base
10 number
decodebase convert whole number in base 10 to string in base [2-36]
.SS  MISCELLANEOUS
.TP
.B describe
returns a string describing the name of a single character
.SS  INTRINSICS
The \fBM_strings\fP(3fm) module supplements and works in combination with
the Fortran built-in intrinsics. Stand-alone Fortran lets you access
the characters in a string using ranges much like they are character
arrays, assignment, comparisons with standard operators, supports
dynamically allocatable strings and supports concatenation using the //
operator, as well as a number of intrinsic string routines:
.PP
.nf
.fam C
       adjustl             Left adjust a string
       adjustr             Right adjust a string
       index               Position of a substring within a string
       repeat              Repeated string concatenation
       scan                Scan a string for the presence of a set
                           of characters
       trim                Remove trailing blank characters of a string
       verify              Scan a string for the absence of a set of
                           characters
       len                 It returns the length of a character string
       achar               converts an integer into a character
       iachar              converts a character into an integer
       len_trim            finds length of string with trailing spaces
                           ignored
       new_line            Newline character
       selected_char_kind  Choose character kind
       lge                 Lexical greater than or equal
       lgt                 Lexical greater than
       lle                 Lexical less than or equal
       llt                 Lexical less than

.fam T
.fi
.SS  OOPS INTERFACE
The \fBM_strings_oop\fP(3fm) module (included with the \fBM_strings\fP(3fm)
module) provides an OOP (Object-Oriented Programming) interface to
the \fBM_strings\fP(3fm) module.
.SH SEE ALSO
There are additional routines in other GPF modules for working with
expressions (M_calculator), time strings (M_time), random strings
(M_random, M_uuid), lists (M_list), and interfacing with the C regular
expression library (M_regex).
.SH EXAMPLES
Each of the procedural functions includes an example program in the
corresponding \fBman\fP(1) page for the function. The object-oriented
interface does not have individual \fBman\fP(1) pages, but is instead
demonstrated using the following example program:
.RE
.PP

.nf
.fam C
    program demo_M_strings
    use M_strings, only : split, delim, chomp, sep
    use M_strings, only : substitute, change, modif
    use M_strings, only : transliterate, reverse
    use M_strings, only : replace, join
    use M_strings, only : upper, lower, upper_quoted
    use M_strings, only : rotate13
    use M_strings, only : adjustc, compact, nospace, indent, crop
    use M_strings, only : unquote, quote
    use M_strings, only : len_white, atleast, stretch, lenset, merge_str
    use M_strings, only : switch, s2c, c2s
    use M_strings, only : noesc, notabs, dilate, expand, visible
    !x!use M_strings, only : uc
    use M_strings, only : string_to_value, string_to_values, s2v, s2vs
    use M_strings, only : value_to_string, v2s, msg
    use M_strings, only : listout, getvals
    use M_strings, only : glob, ends_with
    use M_strings, only : fmt
    use M_strings, only : base, decodebase, codebase, base2
    use M_strings, only : isalnum, isalpha, iscntrl, isdigit, isgraph
    use M_strings, only : islower, isprint, ispunct, isspace, isupper
    use M_strings, only : isascii, isblank, isxdigit
    use M_strings, only : fortran_name
    end program demo_M_strings

.fam T
.fi
.RS
Expected output
.SH AUTHOR
John S. Urban
.SH LICENSE
Public Domain
