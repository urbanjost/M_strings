." Text automatically generated by txt2man
.TH "modif" "3m_strings" "September 10, 2021" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBmodif\fP(3f) - [M_strings:EDITING] emulate the MODIFY command from the
line editor XEDIT
(LICENSE:PD)

.SH SYNOPSIS
subroutine \fBmodif\fP(cline,cmod)
.PP
.nf
.fam C
    character(len=*) :: cline ! input string to change
    ! directive provides directions on changing string
    character(len=*) :: cmod

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
\fBMODIF\fP(3f) Modifies the line currently pointed at using a directive
that acts much like a line editor directive.
Primarily used to create interactive utilities such as input history
editors for interactive line-mode programs.
.PP
the modify directives are as follows-
.SS   DIRECTIVE EXPLANATION

.TP
.B ^STRING#
Causes the string of characters between the ^ and the
next # to be inserted before the characters pointed to
by the ^. an ^ or & within the string is treated as a
regular character. If the closing # is not specified,
\fBMODIF\fP(3f) inserts the remainder of the line as if a # was
specified after the last nonblank character.
.RS
.PP
There are two exceptions. the combination ^# causes a #
to be inserted before the character pointed to by the
^, and an ^ as the last character of the directives
causes a blank to be inserted.
.RE
.TP
.B #
(When not the first # after an ^) causes the character
above it to be deleted.
.TP
.B &
Replaces the character above it with a space.
.TP
.B (SPACE)
A space below a character leaves it unchanged.
.PP
Any other character replaces the character above it.
.SH EXAMPLES
Example input/output:
.PP
.nf
.fam C
   THE INPUT LINE\.\.\...... 10 THIS STRING  TO BE MORTIFD
   THE DIRECTIVES LINE\.\.\.        ^ IS THE#        D#  ^IE
   ALTERED INPUT LINE\.\.\.. 10 THIS IS THE STRING  TO BE MODIFIED

.fam T
.fi
Sample program:
.PP
.nf
.fam C
   program demo_modif
   use M_strings, only : modif
   implicit none
   character(len=256)           :: line
   integer                      :: ios
   integer                      :: count
   integer                      :: COMMAND_LINE_LENGTH
   character(len=:),allocatable :: COMMAND_LINE
      ! get command name length
      call get_command_argument(0,length=count)
      ! get command line length
      call get_command(length=COMMAND_LINE_LENGTH)
      ! allocate string big enough to hold command line
      allocate(character(len=COMMAND_LINE_LENGTH+200) :: COMMAND_LINE)
      ! get command line as a string
      call get_command(command=COMMAND_LINE)
      ! trim leading spaces just in case
      COMMAND_LINE=adjustl(COMMAND_LINE)
      ! remove command name
      COMMAND_LINE=adjustl(COMMAND_LINE(COUNT+2:))
      INFINITE: do
         read(*,'(a)',iostat=ios)line
         if(ios.ne.0)exit
         call modif(line,COMMAND_LINE)
         write(*,'(a)')trim(line)
      enddo INFINITE
   end program demo_modif

.fam T
.fi
.SH AUTHOR
John S. Urban
.SH LICENSE
Public Domain
