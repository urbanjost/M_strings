." Text automatically generated by txt2man
.TH "fortran_name" "3m_strings" "September 10, 2021" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBfortran_name\fP(3f) - [M_strings:COMPARE] test if string meets criteria
for being a fortran name

.SH SYNOPSIS

\fBelemental\fP \fIfunction\fP \fBfortran_name\fP(line) \fIresult\fP (\fI(lout)\fP)
.PP
.nf
.fam C
     character(len=*),intent(in)  :: line
     logical                      :: lout

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
Determines if a string is an allowed Fortran name. To pass the input
string must be composed of 1 to 63 ASCII characters and start with a
letter and be composed entirely of alphanumeric characters [a-zA-Z0-9]
and underscores.
.SH OPTIONS
.TP
.B LINE
input string to test. Leading spaces are significant but
trailing spaces are ignored.
.SH RETURNS
.TP
.B LOUT
a logical value indicating if the input string passed or failed
the test to see if it is a valid Fortran name or not.
.SH EXAMPLE
Sample program
.PP
.nf
.fam C
     program demo_fortran_name
     use M_strings, only : fortran_name
     implicit none
     character(len=*),parameter :: names(*)=[character(len=20) ::  &
      & '_name',         'long_variable_name', 'name_',         &
      & '12L',           'a__b__c  ',          'PropertyOfGas', &
      & '3%3',           '$NAME',              ' ',             &
      & 'Variable-name', 'A',                  'x@x' ]
     integer :: i
        write(*,'(i3,1x,a20,1x,l1)')&
        & (i,names(i),fortran_name(names(i)),i=1,size(names))
     end program demo_fortran_name

.fam T
.fi
Results:
.RS
.TP
.B 1 _name
.TP
.B 2 long_variable_name
.TP
.B 3 name_
.TP
.B 4 12L
.TP
.B 5 a__b__c
.TP
.B 6 PropertyOfGas
.TP
.B 7 3%3
.TP
.B 8 $NAME
.TP
.B 9
.RE
.TP
.B 10 Variable-name
.RS
.TP
.B 11 A
.TP
.B 12 x@x
