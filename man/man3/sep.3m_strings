." Text automatically generated by txt2man
.TH "sep" "3m_strings" "September 10, 2021" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBsep\fP(3f) - [M_strings:TOKENS] function to parse string into an array using
specified delimiters
(LICENSE:PD)

.SH SYNOPSIS
function \fBsep\fP(input_line,delimiters,nulls)
.PP
.nf
.fam C
    character(len=*),intent(in)              :: input_line
    character(len=*),optional,intent(in)     :: delimiters
    character(len=*),optional,intent(in)     :: nulls
    character(len=:),allocatable             :: sep(:)

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
\fBsep\fP(3f) parses a string using specified delimiter characters and
store tokens into an allocatable array
.SH OPTIONS
.TP
.B INPUT_LINE
Input string to tokenize
.TP
.B DELIMITERS
List of delimiter characters.
The default delimiters are the "whitespace" characters
(space, tab,new line, vertical tab, formfeed, carriage
return, and null). You may specify an alternate set of
delimiter characters.
.RS
.PP
Multi-character delimiters are not supported (Each
character in the DELIMITERS list is considered to be
a delimiter).
.PP
Quoting of delimiter characters is not supported.
.RE
.TP
.B NULLS=IGNORE|RETURN|IGNOREEND
Treatment of null fields.
By default adjacent delimiters in the input string
do not create an empty string in the output array. if
NULLS='return' adjacent delimiters create an empty element
in the output ARRAY. If NULLS='ignoreend' then only
trailing delimiters at the right of the string are ignored.
.SH RETURNS
.TP
.B SEP
Output array of tokens
.SH EXAMPLES
Sample program:
.PP
.nf
.fam C
   program demo_sep
   use M_strings, only: sep
   character(len=*),parameter :: fo='(/,a,*(/,"[",g0,"]":,","))'
   character(len=*),parameter :: line=&
   '  aBcdef   ghijklmnop qrstuvwxyz  1:|:2     333|333 a B cc    '
      write(*,'(a)') 'INPUT LINE:['//LINE//']'
      write(*,fo) 'typical call:',sep(line)
      write(*,fo) 'delimiters ":|":',sep(line,':|')
      write(*,fo) 'count null fields ":|":',sep(line,':|','return')
   end program demo_sep

.fam T
.fi
Output
.PP
.nf
.fam C
   INPUT LINE:[  aBcdef   ghijklmnop qrstuvwxyz  1:|:2     333|333 a B cc    ]

   typical call:
   [cc        ],
   [B         ],
   [a         ],
   [333|333   ],
   [1:|:2     ],
   [qrstuvwxyz],
   [ghijklmnop],
   [aBcdef    ]

   delimiters ":|":
   [333 a B cc                         ],
   [2     333                          ],
   [  aBcdef   ghijklmnop qrstuvwxyz  1]

   count null fields ":|":
   [333 a B cc                         ],
   [2     333                          ],
   [                                   ],
   [                                   ],
   [  aBcdef   ghijklmnop qrstuvwxyz  1]

.fam T
.fi
.SH AUTHOR
John S. Urban
.SH LICENSE
Public Domain
