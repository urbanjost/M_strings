." Text automatically generated by txt2man
.TH "join" "3m_strings" "September 10, 2021" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBjoin\fP(3f) - [M_strings:EDITING] append CHARACTER variable array into
a single CHARACTER variable with specified separator
(LICENSE:PD)

.SH SYNOPSIS
pure function \fBjoin\fP(str,sep,trm,left,right,start,end) result (\fIstring\fP)
.PP
.nf
.fam C
    character(len=*),intent(in)          :: str(:)
    character(len=*),intent(in),optional :: sep
    logical,intent(in),optional          :: trm
    character(len=*),intent(in),optional :: right
    character(len=*),intent(in),optional :: left
    character(len=*),intent(in),optional :: start
    character(len=*),intent(in),optional :: end
    character(len=:),allocatable         :: string

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
\fBJOIN\fP(3f) appends the elements of a CHARACTER array into a single
CHARACTER variable, with elements 1 to N joined from left to right.
By default each element is trimmed of trailing spaces and the
default separator is a null \fIstring\fP.
.SH OPTIONS
.TP
.B \fBSTR\fP(:)
array of CHARACTER variables to be joined
.TP
.B SEP
separator \fIstring\fP to place between each variable. defaults
to a null \fIstring\fP.
.TP
.B LEFT
\fIstring\fP to place at left of each element
.TP
.B RIGHT
\fIstring\fP to place at right of each element
.TP
.B START
prefix \fIstring\fP
.TP
.B END
suffix \fIstring\fP
.TP
.B TRM
option to trim each element of STR of trailing
spaces. Defaults to .TRUE.
.SH RESULT
.TP
.B STRING
CHARACTER variable composed of all of the elements of \fBSTR\fP()
appended together with the optional separator SEP placed
between the elements.
.SH EXAMPLE
Sample program:
.PP
.nf
.fam C
  program demo_join
  use M_strings, only: join
  implicit none
  character(len=:),allocatable  :: s(:)
  character(len=:),allocatable  :: out
  integer                       :: i
    s=[character(len=10) :: 'United',' we',' stand,', &
    & ' divided',' we fall.']
    out=join(s)
    write(*,'(a)') out
    write(*,'(a)') join(s,trm=.false.)
    write(*,'(a)') (join(s,trm=.false.,sep='|'),i=1,3)
    write(*,'(a)') join(s,sep='<>')
    write(*,'(a)') join(s,sep=';',left='[',right=']')
    write(*,'(a)') join(s,left='[',right=']')
    write(*,'(a)') join(s,left='>>')
  end program demo_join

.fam T
.fi
Expected output:
.PP
.nf
.fam C
  United we stand, divided we fall.
  United     we        stand,    divided   we fall.
  United    | we       | stand,   | divided  | we fall.
  United    | we       | stand,   | divided  | we fall.
  United    | we       | stand,   | divided  | we fall.
  United<> we<> stand,<> divided<> we fall.
  [United];[ we];[ stand,];[ divided];[ we fall.]
  [United][ we][ stand,][ divided][ we fall.]
  >>United>> we>> stand,>> divided>> we fall.

.fam T
.fi
.SH AUTHOR
John S. Urban
.SH LICENSE
Public Domain
