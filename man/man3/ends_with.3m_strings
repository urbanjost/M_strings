." Text automatically generated by txt2man
.TH "ends_with" "3m_strings" "September 10, 2021" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBends_with\fP(3f) - [M_strings:MATCH] test if string ends with specified \fBsuffix\fP(es)
(LICENSE:PD)

.SH SYNOPSIS
function \fBends_with\fP(source_string,suffix)
.PP
.nf
.fam C
    or

.fam T
.fi
function \fBends_with\fP(source_string,[suffixs])
.PP
.nf
.fam C
    character(len=*),intent(in)          :: source_string
    character(len=*),intent(in)          :: suffix
    logical                              :: ends_with

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION

.SH OPTIONS
.TP
.B SOURCE_STRING
string to tokenize
.TP
.B SUFFIX
list of separator characters. May be scalar or an array.
.SH RETURNS
.TP
.B ENDS_WITH
returns .TRUE. if one of the suffix match the end
of SOURCE_STRING.
.SH EXAMPLES
Sample program:
.PP
.nf
.fam C
   program demo_ends_with
   use M_strings, only : ends_with
   implicit none
      write(*,*)ends_with('prog.a',['.o','.i','.s'])
      write(*,*)ends_with('prog.f90',['.F90','.f90'])
      write(*,*)ends_with('prog.pdf','.pdf')
      write(*,*)ends_with('prog.doc','.txt')
   end program demo_ends_with

.fam T
.fi
Results:
.SS    F
.SS    T
.SS    T
.SS    F

.SH AUTHOR
John S. Urban
.SH LICENSE
Public Domain
